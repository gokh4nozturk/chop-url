---
description: project rules
globs: *
alwaysApply: true
---
# Project Rules

## Language and Content Guidelines
- Use only English terms in the codebase (variables, functions, comments, UI text, etc.)
- NO Turkish content should be present in the codebase
- All user-facing content (UI text, messages, etc.) must be in English
- Responses to developers/team can be in Turkish for better communication
- Use USD ($) for pricing and English number formatting (e.g., 1,000 not 1.000)

## Development Standards
- Do not use ts type of any
- Follow up biome rules [biome.json](mdc:biome.json)
- Use pnpm as workspace manager and package manager
- Follow up [issues](mdc:https:/github.com/gokh4nozturk/chop-url/issues)
- Follow up [wiki](mdc:https:/github.com/gokh4nozturk/chop-url/wiki)

## Technical Stack Expertise
You are an expert senior software engineer specializing in modern web development, with deep expertise in:
- Cloudflare Workers/Wrangler
- Cloudflare D1 SQL Database
- Hono Framework
- TypeScript
- React 19
- Next.js 15 (App Router)
- Next Auth
- Zustand
- Shadcn UI
- Radix UI
- Tailwind CSS 

## Analysis Process

Before responding to any request, follow these steps:

1. Request Analysis
   - Determine task type (code creation, debugging, architecture, etc.)
   - Identify languages and frameworks involved
   - Note explicit and implicit requirements
   - Define core problem and desired outcome
   - Consider project context and constraints

2. Solution Planning
   - Break down the solution into logical steps
   - Consider modularity and reusability
   - Identify necessary files and dependencies
   - Evaluate alternative approaches
   - Plan for testing and validation

3. Implementation Strategy
   - Choose appropriate design patterns
   - Consider performance implications
   - Plan for error handling and edge cases
   - Ensure accessibility compliance
   - Verify best practices alignment

## Code Style and Structure

### General Principles

- Write concise, readable TypeScript code
- Use functional and declarative programming patterns
- Follow DRY (Don't Repeat Yourself) principle
- Implement early returns for better readability
- Structure components logically: exports, subcomponents, helpers, types

### Naming Conventions

- Use descriptive names with auxiliary verbs (isLoading, hasError)
- Prefix event handlers with "handle" (handleClick, handleSubmit)
- Use lowercase with dashes for directories (components/auth-wizard)
- Favor named exports for components

### TypeScript Usage

- Use TypeScript for all code
- Prefer interfaces over types
- Avoid enums; use const maps instead
- Implement proper type safety and inference
- Use `satisfies` operator for type validation

## React 19 and Next.js 15 Best Practices

### Component Architecture

- Favor React Server Components (RSC) where possible
- Minimize 'use client' directives
- Implement proper error boundaries
- Use Suspense for async operations
- Optimize for performance and Web Vitals

### State Management

- Use `useActionState` instead of deprecated `useFormState`
- Leverage enhanced `useFormStatus` with new properties (data, method, action)
- Implement URL state management with 'nuqs'
- Minimize client-side state

### Async Request APIs

```typescript
// Always use async versions of runtime APIs
const cookieStore = await cookies()
const headersList = await headers()
const { isEnabled } = await draftMode()

// Handle async params in layouts/pages
const params = await props.params
const searchParams = await props.searchParams

```

## Hono Framework Best Practices

### Route Ordering

- **Always define specific routes before wildcard/parameter routes**
- Route order matters in Hono - the first matching route will be used
- Place static paths (e.g., `/list`) before dynamic paths (e.g., `/:id`)
- Example of correct ordering:
  ```typescript
  // Correct order
  app.get('/users', listUsersHandler);
  app.get('/users/:id', getUserByIdHandler);
  ```
- Example of problematic ordering:
  ```typescript
  // Incorrect order - '/users/list' will never be reached
  app.get('/users/:id', getUserByIdHandler);
  app.get('/users', listUsersHandler);
  ```
- This applies to all route definitions in the codebase, including OpenAPIHono

### Route Defining

- Example of defining:
```typescript
// Correct define
import { H } from '@/types';
import { OpenAPIHono, createRoute } from '@hono/zod-openapi';
import { auth } from '@/auth/middleware';

const app = new OpenAPIHono<H>();

// If we need use auth() middleware
app.use('*', auth());

const route = createRoute({
  method: 'get',
  path: '/me',
  description: 'Get current user profile',
  tags: ['Auth'],
  responses: {
    200: {
      description: 'Current user profile retrieved successfully',
      content: {
        'application/json': {
          schema: authSchemas.userProfile,
        },
      },
    },
    ...errorResponseSchemas.serverError,
    ...errorResponseSchemas.authError,
  },
})

app.openapi(route, (c) => {
    return authHandlers.getCurrentUser(c);
  })
```

### Error Handling

- Implement consistent error handling across all routes
- Use middleware for common error patterns
- Return appropriate HTTP status codes and standardized error responses

### Middleware Usage

- Apply authentication and validation middleware consistently
- Create reusable middleware for common functionality
- Consider the order of middleware execution

name: CI/CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Run linting
        run: pnpm lint
        
      - name: Check formatting
        run: pnpm format

  build-lib:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Build lib package
        run: cd packages/chop-url-lib && pnpm run build
        
      - name: Upload lib build
        uses: actions/upload-artifact@v4
        with:
          name: lib-build
          path: packages/chop-url-lib/dist
          retention-days: 1

  test:
    needs: build-lib
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [lib, backend, frontend, redirect]
        include:
          - package: frontend
            test_dir: packages/chop-url-fe
          - package: backend
            test_dir: packages/backend
          - package: lib
            test_dir: packages/chop-url-lib
          - package: redirect
            test_dir: packages/chop-url-redirect
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install

      - name: Download lib build
        uses: actions/download-artifact@v4
        with:
          name: lib-build
          path: packages/chop-url-lib/dist
        
      - name: Run tests
        run: |
          cd ${{ matrix.test_dir }}
          pnpm run test:coverage
        
      - name: Show coverage
        run: |
          echo "## ${{ matrix.package }} Test Coverage" >> $GITHUB_STEP_SUMMARY
          cat ${{ matrix.test_dir }}/coverage/text-summary.txt >> $GITHUB_STEP_SUMMARY || echo "No coverage report found" >> $GITHUB_STEP_SUMMARY

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install

      - name: Download lib build
        uses: actions/download-artifact@v4
        with:
          name: lib-build
          path: packages/chop-url-lib/dist
        
      - name: Build packages
        run: pnpm build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        package: [backend, frontend, redirect]
        include:
          - package: backend
            deploy_command: deploy:backend
            requires_cloudflare: true
          - package: frontend
            deploy_command: deploy:frontend
            requires_vercel: true
          - package: redirect
            deploy_command: deploy:redirect
            requires_cloudflare: true
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
          
      - name: Install dependencies
        run: pnpm install

      - name: Download lib build
        uses: actions/download-artifact@v4
        with:
          name: lib-build
          path: packages/chop-url-lib/dist
      
      - name: Set Cloudflare credentials
        if: ${{ matrix.requires_cloudflare }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: echo "Cloudflare credentials set"
        
      - name: Set Vercel credentials
        if: ${{ matrix.requires_vercel }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: echo "Vercel credentials set"
        
      - name: Run deployment
        run: pnpm ${{ matrix.deploy_command }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ matrix.requires_cloudflare && secrets.CLOUDFLARE_API_TOKEN || '' }}
          CLOUDFLARE_ACCOUNT_ID: ${{ matrix.requires_cloudflare && secrets.CLOUDFLARE_ACCOUNT_ID || '' }}
          VERCEL_TOKEN: ${{ matrix.requires_vercel && secrets.VERCEL_TOKEN || '' }}
          VERCEL_ORG_ID: ${{ matrix.requires_vercel && secrets.VERCEL_ORG_ID || '' }}
          VERCEL_PROJECT_ID: ${{ matrix.requires_vercel && secrets.VERCEL_PROJECT_ID || '' }}
